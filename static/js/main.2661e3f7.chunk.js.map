{"version":3,"sources":["Player.js","App.js","serviceWorker.js","index.js"],"names":["PlayerItem","props","seconds","duration","className","classNames","active","src","onClick","setAudio","name","slice","length","parseInt","href","download","AudioPlayer","audio","audioEl","useRef","useEffect","current","paused","pause","load","play","ref","controls","id","Player","AUDIO_FILES","process","AUDIO_DURATION","useState","undefined","style","width","height","map","i","key","e","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAGMA,EAAa,SAACC,GAChB,IAAMC,EAAUD,EAAME,SAAW,IAEjC,OACI,wBAAIC,UAAWC,IAAW,CAAC,WAAW,EAAM,OAAUJ,EAAMK,UACxD,yBAAKF,UAAU,UAAUG,IAAI,oBAAoBC,QAASP,EAAMQ,WAChE,0BAAML,UAAU,YAAYI,QAASP,EAAMQ,UAAWR,EAAMS,KAAKC,MAAM,EAAGV,EAAMS,KAAKE,OAAS,IAC9F,0BAAMR,UAAU,UAAUS,SAASX,EAAU,IAA7C,IAAmDW,SAASX,EAAU,KACtE,uBAAGY,KAAI,gBAAWb,EAAMS,MAAQK,UAAQ,GAAC,yBAAKX,UAAU,UAAUG,IAAI,0BAK5ES,EAAc,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZC,EAAUC,iBAAO,MAUvB,OARAC,qBAAU,WACEF,EAAQG,QAAQC,SAChBJ,EAAQG,QAAQE,QAChBL,EAAQG,QAAQG,OAChBN,EAAQG,QAAQI,UAEzB,CAACR,IAGA,2BAAOS,IAAKR,EAASd,UAAU,WAAWuB,SAAS,YAC/C,4BAAQC,GAAG,OAAOrB,IAAG,gBAAWU,KADpC,iFAkCOY,EA3BA,SAAC5B,GACZ,IAAM6B,EAAcC,sBAA2B,EACzCC,EAAiBD,kBAA8B,EAF/B,EAIIE,mBAASH,EAAYlB,OAAS,EAAIkB,EAAY,QAAKI,GAJvD,mBAIfjB,EAJe,KAIRR,EAJQ,KAMtB,OACI,oCACI,yBAAKL,UAAU,cACX,yBAAKwB,GAAG,kBAAkBO,MAAO,CAACC,MAAO,OAAQC,OAAQ,WAG7D,kBAAC,EAAD,CAAapB,MAAOA,IAEpB,yBAAKb,UAAU,YACX,4BACK0B,EAAYQ,KAAI,SAAC5B,EAAM6B,GAAP,OAAa,kBAAC,EAAD,CAAYC,IAAKD,EACOjC,OAAQI,IAASO,EACjBP,KAAMA,EACNP,SAAU6B,EAAeO,GACzB9B,SAAU,SAAAgC,GAAC,OAAIhC,EAASC,aCrBnFgC,MA9Bf,WACI,OACI,6BAEI,yBAAKtC,UAAU,WACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,QACV,4BAAI,uBAAGU,KAAK,IAAR,UACJ,4BAAI,uBAAGA,KAAK,IAAR,UACJ,4BAAI,uBAAGA,KAAK,IAAR,wBACJ,4BAAI,uBAAGA,KAAK,IAAR,WACJ,4BAAI,uBAAGA,KAAK,IAAR,cAIZ,yBAAKV,UAAU,QAAf,yBAIA,kBAAC,EAAD,OAGJ,4BAAQA,UAAU,UACd,uBAAGU,KAAK,KAAR,4CCfI6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2661e3f7.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport classNames from 'classnames';\n\nconst PlayerItem = (props) => {\n    const seconds = props.duration / 1000;\n\n    return (\n        <li className={classNames({\"pl-item\": true, \"active\": props.active})}>\n            <img className=\"pl-icon\" src=\"icons/speaker.svg\" onClick={props.setAudio}/>\n            <span className=\"song-name\" onClick={props.setAudio}>{props.name.slice(0, props.name.length - 4)}</span>\n            <span className=\"lenght\">{parseInt(seconds / 60)}:{parseInt(seconds % 60)}</span>\n            <a href={`music/${props.name}`} download><img className=\"pl-icon\" src=\"icons/download.svg\"/></a>\n        </li>\n    )\n};\n\nconst AudioPlayer = ({audio}) => {\n    const audioEl = useRef(null);\n\n    useEffect(() => {\n            if(!audioEl.current.paused) {\n                audioEl.current.pause();\n                audioEl.current.load();\n                audioEl.current.play();\n            }\n    }, [audio]);\n\n    return (\n        <audio ref={audioEl} className=\"playback\" controls=\"controls\">\n            <source id=\"file\" src={`music/${audio}`}/>\n            Your browser does not support the player. You still able to download tracks.\n        </audio>\n    );\n};\n\nconst Player = (props) => {\n    const AUDIO_FILES = process.env.AUDIO_FILES || [];\n    const AUDIO_DURATION = process.env.AUDIO_DURATION || [];\n\n    const [audio, setAudio] = useState(AUDIO_FILES.length > 0 ? AUDIO_FILES[0] : undefined);\n\n    return (\n        <>\n            <div className=\"visualizer\">\n                <div id=\"chart-container\" style={{width: \"100%\", height: \"100%\"}}></div>\n            </div>\n\n            <AudioPlayer audio={audio}/>\n\n            <div className=\"playlist\">\n                <ul>\n                    {AUDIO_FILES.map((name, i) => <PlayerItem key={i}\n                                                                          active={name === audio}\n                                                                          name={name}\n                                                                          duration={AUDIO_DURATION[i]}\n                                                                          setAudio={e => setAudio(name)}/>)}\n                </ul>\n            </div>\n        </>\n    );\n};\n\nexport default Player;\n","import React from 'react';\nimport './App.css';\nimport Player from \"./Player\";\n\nfunction App() {\n    return (\n        <div>\n\n            <div className=\"content\">\n                <div className=\"top-menu\">\n                    <ul className=\"menu\">\n                        <li><a href=\"\">Music</a></li>\n                        <li><a href=\"\">About</a></li>\n                        <li><a href=\"\">Sign-up for updates</a></li>\n                        <li><a href=\"\">Donate</a></li>\n                        <li><a href=\"\">Contact</a></li>\n                    </ul>\n                </div>\n\n                <div className=\"logo\">\n                    sleepingaliencreature\n                </div>\n\n                <Player/>\n            </div>\n\n            <footer className=\"footer\">\n                <a href=\"#\">Created by sleepingaliencreature 2020</a>\n            </footer>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}